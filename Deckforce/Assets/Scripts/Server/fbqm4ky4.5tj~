using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using PlayFab;
using PlayFab.MultiplayerModels;

public class Matchmaking : MonoBehaviour
{
    public static Matchmaking instance;

    private string queueName;
    private string ticketId;
    private Coroutine pollTicket;

    public enum MatchTypes
    {
        OneVsOne
    }

    private void Awake()
    {
        instance = this;
    }

    public void FindMatch(MatchTypes matchType)
    {
        if (!Authentification.instance.isAuthenticated)
            return;

        switch (matchType)
        {
            case MatchTypes.OneVsOne:
                FindOneVsOneMatch();
                break;
            default:
                break;
        }
    }

    private void FindOneVsOneMatch()
    {
        queueName = "OneVsOne";

        PlayFabMultiplayerAPI.CreateMatchmakingTicket(
            new CreateMatchmakingTicketRequest
            {
                Creator = new MatchmakingPlayer
                {
                    Entity = new EntityKey
                    {
                        Id = Authentification.instance.userInfo.entityId,
                        Type = "title_player_account"
                    },
                    Attributes = new MatchmakingPlayerAttributes {}
                },
                QueueName = queueName
            },
            OnMatchmakingTicketCreated,
            OnMatchmakingError
            );
    }

    private void OnMatchmakingTicketCreated(CreateMatchmakingTicketResult result)
    {
        ticketId = result.TicketId;
        pollTicket = StartCoroutine(PollTicket());
    }

    private IEnumerator PollTicket()
    {
        while (true)
        {
            PlayFabMultiplayerAPI.GetMatchmakingTicket(new GetMatchmakingTicketRequest
            {
                TicketId = ticketId,
                QueueName = queueName
            },
            OnGetMatchmakingTicket,
            OnMatchmakingError
            );
            yield return new WaitForSeconds(6);
        }
    }

    private void OnGetMatchmakingTicket(GetMatchmakingTicketResult result)
    {
        switch (result.Status)
        {
            case "Matched":
                StopCoroutine(pollTicket);
                StartMatch(result.MatchId);
                break;
            case "Canceled":
                // TODO: Handle canceled matchmaking
                break;
        }
    }

    private void StartMatch(string matchId)
    {
        PlayFabMultiplayerAPI.GetMatch(
            new GetMatchRequest
            {
                MatchId = matchId,
                QueueName = queueName
            },
            OnGetMatch,
            OnMatchmakingError
            );
    }

    private void OnGetMatch(GetMatchResult result)
    {
        GameServer.instance.connect(result.ServerDetails.IPV4Address, result.ServerDetails.Ports[0].Num);
    }

    private void OnMatchmakingError(PlayFabError error)
    {
        // TODO: Handle matchmaking errors
    }
}
